#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>

/**
 * @brief Checks if a string is a palindrome.
 * * This function is case-insensitive and ignores non-alphanumeric characters.
 * It uses a two-pointer approach for efficiency.
 * * @param s The input string to check.
 * @return true if the string is a palindrome, false otherwise.
 */
bool isPalindrome(const char *s) {
    if (s == NULL) {
        return false; // Or true, depending on requirements for NULL strings
    }
    
    int left = 0;
    int right = strlen(s) - 1;

    while (left < right) {
        // Move the left pointer to the next alphanumeric character
        while (left < right && !isalnum(s[left])) {
            left++;
        }
        
        // Move the right pointer to the previous alphanumeric character
        while (left < right && !isalnum(s[right])) {
            right--;
        }

        // Compare the characters (case-insensitive)
        if (tolower(s[left]) != tolower(s[right])) {
            return false; // Characters do not match
        }

        // Move pointers inward
        left++;
        right--;
    }

    return true; // All characters matched
}

int main() {
    const char *str1 = "Racecar";
    const char *str2 = "A man, a plan, a canal: Panama";
    const char *str3 = "hello";
    const char *str4 = "Was it a car or a cat I saw?";

    printf("'%s' -> %s\n", str1, isPalindrome(str1) ? "Palindrome" : "Not a Palindrome");
    printf("'%s' -> %s\n", str2, isPalindrome(str2) ? "Palindrome" : "Not a Palindrome");
    printf("'%s' -> %s\n", str3, isPalindrome(str3) ? "Palindrome" : "Not a Palindrome");
    printf("'%s' -> %s\n", str4, isPalindrome(str4) ? "Palindrome" : "Not a Palindrome");

    return 0;
}