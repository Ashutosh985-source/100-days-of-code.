#include <stdio.h>

/*
 * This function finds the majority element in an array.
 * The majority element appears strictly more than n/2 times.
 * It returns the majority element or -1 if none exists.
 */
int findMajorityElement(int nums[], int n) {
    
    // --- Phase 1: Find a candidate ---
    // Use Boyer-Moore Majority Vote Algorithm
    
    int candidate = -1;
    int count = 0;

    for (int i = 0; i < n; i++) {
        if (count == 0) {
            // If count is 0, we pick a new candidate
            candidate = nums[i];
            count = 1;
        } else if (nums[i] == candidate) {
            // If the element matches the candidate, increment count
            count++;
        } else {
            // If the element is different, it "cancels" one count
            count--;
        }
    }
    
    // At this point, 'candidate' is the ONLY potential majority element.
    // If no majority element exists, 'candidate' is just a leftover.

    // --- Phase 2: Verify the candidate ---
    // We must count its actual occurrences to be sure.
    
    int verifyCount = 0;
    for (int i = 0; i < n; i++) {
        if (nums[i] == candidate) {
            verifyCount++;
        }
    }

    // The condition is "strictly more than n/2".
    // Integer division (n / 2) automatically handles the floor (⌊n/2⌋).
    if (verifyCount > n / 2) {
        return candidate;
    } else {
        return -1;
    }
}

int main() {
    int n;

    printf("Enter the size of the array: ");
    scanf("%d", &n);

    // Handle empty or invalid array case
    if (n <= 0) {
        printf("Majority element: -1\n");
        return 0;
    }

    int nums[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &nums[i]);
    }

    int majorityElement = findMajorityElement(nums, n);

    printf("Majority element: %d\n", majorityElement);

    return 0;
}