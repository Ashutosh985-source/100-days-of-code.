#include <stdio.h>

// Helper function to swap two integer values
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Helper function to reverse a portion of an array from a start to an end index
void reverse(int arr[], int start, int end) {
    while (start < end) {
        swap(&arr[start], &arr[end]);
        start++;
        end--;
    }
}

// Function to rotate an array to the right by k positions
void rotateRight(int arr[], int n, int k) {
    // If k is 0 or a multiple of n, no rotation is needed.
    if (k == 0 || k % n == 0) {
        return;
    }
    
    // Normalize k: if k > n, the effective rotation is k % n.
    k = k % n;

    // --- The Reversal Algorithm ---
    // 1. Reverse the entire array.
    reverse(arr, 0, n - 1);

    // 2. Reverse the first k elements.
    reverse(arr, 0, k - 1);

    // 3. Reverse the remaining n-k elements.
    reverse(arr, k, n - 1);
}

int main() {
    int n, k, i;

    // --- Input Section ---
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    
    if (n <= 0) {
        printf("Array size must be positive.\n");
        return 1;
    }

    int arr[n];

    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter the number of positions to rotate right: ");
    scanf("%d", &k);
    
    // --- Logic & Output ---
    printf("\nOriginal array: ");
    for(i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    rotateRight(arr, n, k);

    printf("\nArray after rotating right by %d positions: ", k);
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}