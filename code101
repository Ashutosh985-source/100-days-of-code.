#include <stdio.h>

/**
 * @brief Finds the first (leftmost) occurrence of the target in a sorted array.
 * @param nums The sorted array.
 * @param size The number of elements in the array.
 * @param target The value to search for.
 * @return The index of the first occurrence, or -1 if not found.
 */
int findFirst(int nums[], int size, int target) {
    int low = 0;
    int high = size - 1;
    int result = -1; // Default to -1 (not found)

    while (low <= high) {
        // Use (high - low) / 2 to prevent potential integer overflow
        int mid = low + (high - low) / 2;

        if (nums[mid] == target) {
            // We found the target. This *might* be the first occurrence.
            // Store this index and keep searching to the left.
            result = mid;
            high = mid - 1; 
        } else if (nums[mid] < target) {
            // The target must be on the right side.
            low = mid + 1;
        } else {
            // nums[mid] > target
            // The target must be on the left side.
            high = mid - 1;
        }
    }
    return result;
}

/**
 * @brief Finds the last (rightmost) occurrence of the target in a sorted array.
 * @param nums The sorted array.
 * @param size The number of elements in the array.
 * @param target The value to search for.
 * @return The index of the last occurrence, or -1 if not found.
 */
int findLast(int nums[], int size, int target) {
    int low = 0;
    int high = size - 1;
    int result = -1; // Default to -1 (not found)

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (nums[mid] == target) {
            // We found the target. This *might* be the last occurrence.
            // Store this index and keep searching to the right.
            result = mid;
            low = mid + 1;
        } else if (nums[mid] < target) {
            // The target must be on the right side.
            low = mid + 1;
        } else {
            // nums[mid] > target
            // The target must be on the left side.
            high = mid - 1;
        }
    }
    return result;
}

/**
 * @brief Main function to demonstrate finding first and last occurrences.
 */
int main() {
    // Example 1: Target present multiple times
    int nums1[] = {5, 7, 7, 8, 8, 10};
    int target1 = 8;
    int size1 = sizeof(nums1) / sizeof(nums1[0]);
    
    int first1 = findFirst(nums1, size1, target1);
    int last1 = findLast(nums1, size1, target1);
    
    printf("Array: [5, 7, 7, 8, 8, 10], Target: %d\n", target1);
    printf("First Occurrence: %d, Last Occurrence: %d\n\n", first1, last1);

    // ---
    
    // Example 2: Target not present
    int nums2[] = {5, 7, 7, 8, 8, 10};
    int target2 = 6;
    int size2 = sizeof(nums2) / sizeof(nums2[0]);

    int first2 = findFirst(nums2, size2, target2);
    int last2 = findLast(nums2, size2, target2);
    
    printf("Array: [5, 7, 7, 8, 8, 10], Target: %d\n", target2);
    printf("First Occurrence: %d, Last Occurrence: %d\n\n", first2, last2);

    // ---

    // Example 3: Target is a single element
    int nums3[] = {1, 2, 3, 4, 5};
    int target3 = 3;
    int size3 = sizeof(nums3) / sizeof(nums3[0]);

    int first3 = findFirst(nums3, size3, target3);
    int last3 = findLast(nums3, size3, target3);
    
    printf("Array: [1, 2, 3, 4, 5], Target: %d\n", target3);
    printf("First Occurrence: %d, Last Occurrence: %d\n\n", first3, last3);

    return 0;
}